
---------
---- TODO:
-
-
-
-
-
-> notifications -> via email ?*
-> refactor aircraft logics (use it to leg item, not to the flight item), ?*

-> add more mock data,
-
-
-
-
-
-
--------------------------------


_________________________________________________________________________________
---- TODO:

-> S +++
-> O +++
-> L +
-> I +++
-> D +++
-> factory pattern to db init ?


-> S - Single-Responsibility principle ++ (	A class should have one and only one reason to change, meaning that
																						a class should have only one job.)
-> O - Open-Closed principle ++ (	Objects or entities should be open for extension but closed for modification	)
-> L - Liskov Substitution principle
-> I - Interface Segregation principle ++ (client should be forced to impl an interface that it doesn't use)
-> D - Dependency inversion principle ++ (depends on abstract, not from concretes)

----------------------------------------------------------------------------------
---- TODO:


####################################### -- >

-> app unit tests !!! *
-> run database as docker container *** ?
-> containerizing app *** ?


---- DONE:

-> setup redis configs +++

-> finish getFlightDetails method and make sure there it's working fine, ++
-> update getHot and update (flight entity), +++
-> update exception handling logic (add notification) ++++

-> mysql migrations via java +++
-> test User area  ++

-> setup jwt configs **

-> bye ticket form **
-> generate ticket QR-code to customer **
-> send email with QR-code to customer **
-> history as guest or as signed  customer ??

-> create mock data +++ <
-> create tables  +++ <
-> test requests via $curl +++ <

-> actions -> save, get +++
-> logs -> save ++

-> auth area ++++

-> enable caching to flight area +++

-> setup mysql container ++ <
-> create sql procedures to store data in the most convenient way +++
-> create complicated select queries to get filtered flight data +++
