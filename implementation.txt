
#------------------- main things ------------------#

hear I implemented singleton, DI, *** IoC design principles ***
also I used abstractions to describe classes before using it

DDD project architecture and TDD techniques were used

*** to start you should change
-> spring.datasource.username
->

#--------------------------------------------#

localhost:1111/api === APINAME

--> main page: (>APINAME/avia/get-hot/)
  - search bar
    -> search bar fields:
        - flightDate
        - departureAirport
        - arrivalAirport
        - departureDate
        - returnDate
        - passengerCount
        - cabinClass
        - filterOptions
  - list of hot tickets (today cheapest flights)

#--------------------------------------------#

--> auth page:
  - signUp:
    -> fields:
      - name
      - email
      - pwd
  - forgot pwd:
    -> fields:
      - email
  - signIn
    -> fields:
      - email
      - pwd
      - 2fa

#--------------------------------------------#

--> customer profile page:
  - profile details:
    -> fields: 
      - name
      - email
      - join date
      - 2fa status
      - kyc status
      - miles

  - kyc:
    -> fields:
      - name 
      - surname
      - postal code
      - address
      - phone number
      - id card photo

  - settings:
    - change name
    - change pwd
    - update 2fa status (on/off)

#--------------------------------------------#

--> tickets page:
  - active ticket short card
    -> detail page: 
      - date
      - ...

  - tickets history
    - (list of tickets short card )


#--------------------------------------------#

#--------------------------------------------#
#--------------------------------------------#
#--------------------------------------------#
#--------------------------------------------#
#--------------------------------------------#
#--------------------------------------------#
#--------------------------------------------#
